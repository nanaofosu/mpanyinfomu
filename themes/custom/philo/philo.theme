<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 *
 */
function philo_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for blocks.
 */
function philo_theme_suggestions_block_alter(&$suggestions, $variables) {

  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('platon_', 'philo_', $suggestion);
  }

}

/**
 * Implements hook_theme_suggestions_alter().
 */
function philo_theme_suggestions_alter(&$suggestions, $variables, $hook) {
  if ($hook == 'page') {

    // Node type.
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {
      $suggestions[] = 'page__node__' . $node->type->target_id;
    }

    $suggestions = array_unique($suggestions);
  }
}

/**
 * Implements hook_preprocess_html().
 */
function philo_preprocess_html(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }

}

/**
 * Implements hook_preprocess_page().
 */
function philo_preprocess_page(&$variables)
{
  $route = \Drupal::routeMatch()->getRouteName();
  $moduleHandler = \Drupal::service('module_handler');
  $variables['route_name'] = $route;

  /** Search form */
  $variables['search_form'] = null;
  if ($moduleHandler->moduleExists('search')) {
    $form = Drupal::formBuilder()
      ->getForm(Drupal\search\Form\SearchBlockForm::class);
    $render = Drupal::service('renderer');
    $form['keys']['#attributes']['placeholder'] = $form['keys']['#title'];
    $form['keys']['#title'] = NULL;
    $variables['search_form'] = $render->renderPlain($form);
  }

}

/**
 * Implements hook_preprocess_region().
 */
function philo_preprocess_region(&$variables)
{
  $variables['attributes']['class'] = ['region', 'region-' . $variables['region']];
}

/**
 * Implements hook_form_alter().
 */
function philo_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  foreach ($form as &$item) {
    if (is_array($item) && isset($item['widget']) && is_array($item['widget'])) {
      foreach ($item['widget'] as &$widget) {
        if (is_array($widget) && isset($widget['#type']) && $widget['#type'] == 'managed_file') {
          $widget['#field_prefix'] = '<div class="opigno-file-widget-wrapper">';
          $widget['#field_suffix'] = '<div class="empty-informations">';
          $widget['#field_suffix'] .= '<div class="picto-file-upload"></div>';
          $widget['#field_suffix'] .= '<div>' . t('Upload a file') . '</div>';
          $widget['#field_suffix'] .= '<div>' . t('Drag and drop or click here to select a file') . '</div>';
          $widget['#field_suffix'] .= '</div>';
          $widget['#field_suffix'] .= '</div>';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_input().
 */
function philo_preprocess_input(&$variables)
{
  if ($variables['element']['#type'] == 'submit') {
    $variables['attributes']['class'][] = 'btn';
    $variables['attributes']['class'][] = 'btn-success';
  } elseif ($variables['element']['#type'] == 'checkbox' || $variables['element']['#type'] == 'radio') {
    $variables['attributes']['class'][] = 'form-check-input';
  } elseif ($variables['element']['#type'] != 'hidden') {
    $variables['attributes']['class'][] = 'form-control';
  }
}

/**
 * Implements hook_preprocess_select().
 */
function philo_preprocess_select(&$variables)
{
  $variables['attributes']['class'][] = 'form-control';
}

/**
 * Implements hook_preprocess_textarea().
 */
function philo_preprocess_textarea(&$variables)
{
  $variables['attributes']['class'][] = 'form-control';
}

/**
 * Implements hook_preprocess_form_element().
 */
function philo_preprocess_form_element(&$variables)
{
  $variables['attributes']['class'][] = 'form-group';
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function philo_preprocess_menu_local_task(&$variables)
{
  $variables['attributes']['class'][] = 'list-inline-item';
}

/**
 * Implements hook_preprocess_menu_local_action().
 */
function philo_preprocess_menu_local_action(&$variables)
{
  $variables['attributes']['class'][] = 'list-inline-item';
}

/**
 * Implements hook_preprocess_field().
 */
function philo_preprocess_field(&$variables)
{
  $variables['attributes']['class'][] = str_replace('_', '-', $variables['field_name']);

  if ($variables['element']['#bundle'] === 'private_message') {
    if ($variables['element']['#field_name'] === 'message') {
      $date = \Drupal::service('date.formatter')
        ->format($variables['element']['#object']->get('created')
          ->getString(), 'short');
      $variables['items'][0]['content']['#prefix'] = '<div class="date">' . $date . '</div>';
    }

    unset($variables['attributes']['data-quickedit-field-id']);
  }
  elseif ($variables['element']['#bundle'] === 'private_message_thread') {
    unset($variables['attributes']['data-quickedit-field-id']);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function philo_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = 'block-' . $variables['base_plugin_id'];
  if ($variables['derivative_plugin_id']) {
    $variables['attributes']['class'][] = 'block-' . $variables['base_plugin_id'] . '-' . $variables['derivative_plugin_id'];
  }
}

