<?php

/**
 * @file
 * Functions to support theming in the Sophia's Theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function sophia_preprocess_html(&$variables) {
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  // SEO Information
  $http_equiv = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];

}

function sophia_page_attachments_alter(&$page) {
  $viewport = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ],
  ];
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function sophia_preprocess_page(&$variables) {
  //$variables['#attached']['library'][] = 'sophia/bootstrap-cdn';


  //  $width = _sophia_content_width(!empty($variables['page']['sidebar_first']), !empty($variables['page']['sidebar_second']));
  //  $content_width = 'col-md-' . $width;
  //$content_width = 'col';
  $content_width = 'col-md-6';
  //$sidebar_first_width = 'col-md-' . theme_get_setting('sophia_sidebar_first_width');
  //$sidebar_second_width = 'col-md-' . theme_get_setting('sophia_sidebar_second_width');

  // Define default classes for containers

  $variables['navbar_top_attributes'] = [
    'class' => [ 'navbar' ],
    'id' => ['navbar-top' ],
  ];
  $variables['navbar_attributes'] = [
    'class' => [ 'navbar' ],
    'id' => [ 'navbar-main' ],
  ];
  $variables['content_attributes'] = [
    'class' => [ 'main-content', $content_width ],
    'id' => [ 'content' ],
    'role' => [ 'main' ],
  ];

}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function sophia_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function sophia_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Bootstrap Barrio has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'sophia/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function sophia_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function sophia_preprocess_region(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function sophia_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

function sophia_preprocess_form_element(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for form-element-label.html.twig.
 */
function sophia_preprocess_form_element_label(&$variables) {
  $element = $variables['element'];
}

/**
 * Implements hook_preprocess_HOOK() for select.html.twig.
 */
function sophia_preprocess_select(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for file-managed-file.html.twig.
 */
function sophia_preprocess_file_managed_file(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function sophia_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}


function sophia_preprocess_menu_local_task(&$variables) {
  // We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */

function sophia_preprocess_menu_local_action(&$variables) {
  // We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';

  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = [
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  ];
}


/**
 * Implements template_preprocess_table()
 */
function sophia_preprocess_table(&$variables) {

}

/**
 * Implements template_preprocess_views_view_table()
 */
function sophia_preprocess_views_view_table(&$variables) {

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for region templates.
 */
function sophia_theme_suggestions_region_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_HOOK_form_alter() for node add/edit.
 */
function sophia_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['node_edit_form'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for links templates.
 */
function sophia_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  // ToDo get from core a variable to flag inline links
  if ( in_array('inline', $variables['attributes']['class']) ) {
    $suggestions[] = 'links__inline';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for status messages templates.
 */
function sophia_theme_suggestions_status_messages_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function sophia_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if ($variables['element']['#form_id'] == 'node_form') {
    $suggestions[] = 'node_edit_form';
  }
}

//nana
function sophia_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
kint($form);
}

function sophia_form_opigno_module_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
  unset($form['module_media_image']);
}
function sophia_form_group_learning_path_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
  unset($form['field_certificate']);
  unset($form['field_requires_validation']);
  unset($form['field_required_trainings']);
  unset($form['field_learning_path_enable_forum']);
  unset($form['field_learning_path_visibility']['widget']['#options']['semiprivate']);
  unset($form['field_learning_path_duration']);
  unset($form['field_learning_path_media_image']);
}
/* Customizing the add group form */
function sophia_form_group_learning_path_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){

  unset($form['field_certificate']);
  unset($form['field_requires_validation']);
  unset($form['field_required_trainings']);
  unset($form['field_learning_path_enable_forum']);
  unset($form['field_learning_path_visibility']['widget']['#options']['semiprivate']);
  unset($form['field_learning_path_duration']);
  unset($form['field_learning_path_media_image']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function sophia_theme_suggestions_input_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_input() to add classes to inputs.
 */
function sophia_preprocess_input(&$variables) {

}
